// ruble-to-tenge-mig.js
const express = require("express");
const axios = require("axios");
const app = express();
app.use(express.json());

const WEBHOOK = "https://itnasr.bitrix24.kz/rest/1/ryf2hig29n6p3f1w/";
const RUBLE_FIELD = "UF_CRM_1753277551304"; // –ø–æ–ª–µ "–°—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö"

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —á–∏—Å–µ–ª
function toNum(s) {
  if (!s) return NaN;
  return parseFloat(String(s).replace(/\s/g, "").replace(",", "."));
}

// –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –ø–æ–∫—É–ø–∫–∏ RUB ‚Üí KZT —Å mig.kz
async function getRubRateFromMig() {
  const url = "https://mig.kz/api/v1/gadget/html";
  const { data: html } = await axios.get(url, { timeout: 10000 });

  // –£–±–∏—Ä–∞–µ–º —Ç–µ–≥–∏ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
  const text = String(html)
    .replace(/&nbsp;/gi, " ")
    .replace(/<[^>]+>/g, " ")
    .replace(/\s+/g, " ")
    .trim();

  // –ò—â–µ–º –±–ª–æ–∫ "RUB" –∏ –∑–Ω–∞—á–µ–Ω–∏–µ "–ü–æ–∫—É–ø–∫–∞"
  const rubBlock = text.split("RUB")[1];
  if (!rubBlock) throw new Error("RUB not found in MiG");

  const match = rubBlock.match(/–ü–æ–∫—É–ø–∫–∞\s*([\d.,]+)/i);
  if (!match) throw new Error("RUB buy rate not found");

  return toNum(match[1]);
}

app.get("/", (req, res) => {
  res.send("üöÄ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç! –û–∂–∏–¥–∞—é POST –æ—Ç Bitrix24...");
});

app.get("/ping", (req, res) => {
  res.send("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç! –í—Ä–µ–º—è: " + new Date().toISOString());
});

app.post("/", async (req, res) => {
  const dealId = req.body?.data?.FIELDS?.ID;
  if (!dealId) return res.status(400).send("‚ùå –ù–µ –ø–µ—Ä–µ–¥–∞–Ω ID —Å–¥–µ–ª–∫–∏");

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–¥–µ–ª–∫—É
    const getRes = await axios.post(`${WEBHOOK}crm.deal.get`, { id: dealId });
    const deal = getRes.data?.result;
    const rubRaw = deal?.[RUBLE_FIELD];
    if (!rubRaw) return res.status(200).send("‚ö†Ô∏è –ü–æ–ª–µ —Å —Ä—É–±–ª—è–º–∏ –ø—É—Å—Ç–æ–µ");

    const rub = toNum(rubRaw);
    if (isNaN(rub)) return res.status(200).send("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä—É–±–ª—è");

    // –ö—É—Ä—Å RUB‚ÜíKZT (–ø–æ–∫—É–ø–∫–∞)
    const rate = await getRubRateFromMig();
    if (!rate) return res.status(500).send("‚ùå –ö—É—Ä—Å –Ω–µ –ø–æ–ª—É—á–µ–Ω —Å MiG");

    const tenge = Math.round(rub * rate);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—É —Å–¥–µ–ª–∫–∏
    await axios.post(`${WEBHOOK}crm.deal.update`, {
      id: dealId,
      fields: {
        OPPORTUNITY: tenge,
        CURRENCY_ID: "KZT",
      },
    });

    console.log(`‚úÖ –°–¥–µ–ª–∫–∞ #${dealId}: ‚ÇΩ${rub} √ó ${rate} = ${tenge} ‚Ç∏`);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã
    const productRes = await axios.post(`${WEBHOOK}crm.deal.productrows.get`, { id: dealId });
    const productRows = productRes.data?.result;

    if (productRows && productRows.length > 0) {
      const updatedRows = productRows.map((row) => ({
        ...row,
        PRICE: tenge,
        PRICE_BRUTTO: tenge,
        PRICE_NETTO: tenge,
        CURRENCY_ID: "KZT",
      }));

      await axios.post(`${WEBHOOK}crm.deal.productrows.set`, {
        id: dealId,
        rows: updatedRows,
      });

      console.log(`üõí –û–±–Ω–æ–≤–ª–µ–Ω—ã —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å–¥–µ–ª–∫–µ #${dealId} ‚Üí ${tenge} ‚Ç∏`);
    } else {
      console.warn("‚ö†Ô∏è –í —Å–¥–µ–ª–∫–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è");
    }

    res.send(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ‚ÇΩ${rub} √ó ${rate} = ${tenge} ‚Ç∏`);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", err.message);
    res.status(500).send("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É", PORT));
